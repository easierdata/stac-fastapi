name: stac-fastapi
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    timeout-minutes: 10

    services:
      db_service:
        image: ghcr.io/stac-utils/pgstac:v0.6.13
        env:
          POSTGRES_USER: username
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgis
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          PGUSER: username
          PGPASSWORD: password
          PGDATABASE: postgis
          ALLOW_IP_RANGE: 0.0.0.0/0
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 10s
          --health-retries 10
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      # Setup Python (faster than using Python container)
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Lint code
        if: ${{ matrix.python-version == 3.8 }}
        run: |
          python -m pip install pre-commit
          pre-commit run --all-files

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      - name: Install types
        run: |
          pip install ./stac_fastapi/types[dev]

      - name: Install core api
        run: |
          pip install ./stac_fastapi/api[dev]

      - name: Install Extensions
        run: |
          pip install ./stac_fastapi/extensions[dev]

      - name: Install sqlalchemy stac-fastapi
        run: |
          pip install ./stac_fastapi/sqlalchemy[dev,server]

      - name: Install pgstac stac-fastapi
        run: |
          pip install ./stac_fastapi/pgstac[dev,server]

      - name: Run migration
        run: |
          cd stac_fastapi/sqlalchemy && alembic upgrade head
        env:
          POSTGRES_USER: username
          POSTGRES_PASS: password
          POSTGRES_DBNAME: postgis
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432

      - name: Run test suite
        run: |
          cd stac_fastapi/api && pipenv run pytest -svvv
        env:
          ENVIRONMENT: testing

      - name: Run test suite
        run: |
          cd stac_fastapi/types && pipenv run pytest -svvv
        env:
          ENVIRONMENT: testing

      - name: Run test suite
        run: |
          cd stac_fastapi/sqlalchemy && pipenv run pytest -svvv
        env:
          ENVIRONMENT: testing
          POSTGRES_USER: username
          POSTGRES_PASS: password
          POSTGRES_DBNAME: postgis
          POSTGRES_HOST_READER: localhost
          POSTGRES_HOST_WRITER: localhost
          POSTGRES_PORT: 5432

      - name: Run test suite
        run: |
          cd stac_fastapi/pgstac && pipenv run pytest -svvv
        env:
          ENVIRONMENT: testing
          POSTGRES_USER: username
          POSTGRES_PASS: password
          POSTGRES_DBNAME: postgis
          POSTGRES_HOST_READER: localhost
          POSTGRES_HOST_WRITER: localhost
          POSTGRES_PORT: 5432

  validate:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        backend: ["sqlalchemy", "pgstac"]
    services:
      pgstac:
        image: ghcr.io/stac-utils/pgstac:v0.6.13
        env:
          POSTGRES_USER: username
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgis
          PGUSER: username
          PGPASSWORD: password
          PGDATABASE: postgis
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: stac_fastapi/pgstac/setup.cfg
      - name: Install stac-fastapi and stac-api-validator
        run: pip install ./stac_fastapi/api ./stac_fastapi/types ./stac_fastapi/${{ matrix.backend }}[server] stac-api-validator==0.4.1
      - name: Run migration
        if: ${{ matrix.backend == 'sqlalchemy' }}
        run: cd stac_fastapi/sqlalchemy && alembic upgrade head
        env:
          POSTGRES_USER: username
          POSTGRES_PASS: password
          POSTGRES_DBNAME: postgis
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
      - name: Load data and validate
        run: python -m stac_fastapi.${{ matrix.backend }}.app & ./scripts/wait-for-it.sh localhost:8080 && python ./scripts/ingest_joplin.py http://localhost:8080 && ./scripts/validate http://localhost:8080
        env:
          POSTGRES_USER: username
          POSTGRES_PASS: password
          POSTGRES_DBNAME: postgis
          POSTGRES_HOST_READER: localhost
          POSTGRES_HOST_WRITER: localhost
          POSTGRES_PORT: 5432
          PGUSER: username
          PGPASSWORD: password
          PGHOST: localhost
          PGDATABASE: postgis
          APP_HOST: 0.0.0.0
          APP_PORT: 8080

  test-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test generating docs
        run: make docs

  docker-build-push:
    runs-on: ubuntu-latest
    needs: [test, validate, test-docs]
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: true
      matrix:
        backend: ["sqlalchemy", "pgstac"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ghcr.io/stac-utils/stac-fastapi
          tags: |
            type=schedule,suffix=-${{ matrix.backend }}
            type=ref,event=branch,suffix=-${{ matrix.backend }}
            type=ref,event=tag,suffix=-${{ matrix.backend }}
            type=ref,event=pr,suffix=-${{ matrix.backend }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.backend }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
